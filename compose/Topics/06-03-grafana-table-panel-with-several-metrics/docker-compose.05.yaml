version: "3.7"
services:

## prometheus
  prometheus:
    image: quay.io/prometheus/prometheus:v3.6.0
    container_name: prometheus
    volumes:
     - ${PWD}/compose/data/prometheus/etc:/etc/prometheus/
     - ${PWD}/compose/data/prometheus/data:/prometheus/
    command: '--config.file=/etc/prometheus/prometheus.yml --storage.tsdb.path=/prometheus --web.enable-admin-api'
    ports:
     - 9090:9090
    networks:
     - grafana_net
     
## grafana
  grafana:
    image: grafana/grafana:12.2.0
    container_name: grafana
    user: 0:0
    ports:
     - 3000:3000
    volumes:
     - ${PWD}/compose/data/grafana/etc:/etc/grafana/
     - ${PWD}/compose/data/grafana/etc/provisioning/datasources/datasource.yaml:/etc/grafana/provisioning/datasources/datasource.yaml
     - ${PWD}/compose/data/grafana/data:/var/lib/grafana
    networks:
     - grafana_net
    depends_on: 
      - prometheus

# elasticsearch
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.9.0
    container_name: elasticsearch
    environment:
      -  cluster.name=docker-cluster-elasticsearch
      - xpack.security.enabled=false
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms2g -Xmx2g"
      - discovery.type=single-node
      - cluster.routing.allocation.disk.threshold_enabled=true
      - cluster.routing.allocation.disk.watermark.low=2gb
      - cluster.routing.allocation.disk.watermark.high=1gb
      - cluster.routing.allocation.disk.watermark.flood_stage=512mb
    mem_limit: 4g
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    cap_add:
      - IPC_LOCK
    volumes:
      - ${PWD}/compose/data/elasticsearch/data:/usr/share/elasticsearch/data
    ports:
      - 8881:9200
      - 8882:9300
    networks:
     - grafana_net

## Kibana
  kibana:
    container_name: kibana
    image: docker.elastic.co/kibana/kibana:8.9.0
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - 8888:5601
    depends_on:
      - elasticsearch
    networks:
      - grafana_net

## elasticsearch_exporter  
  elasticsearch_exporter:
      image: quay.io/prometheuscommunity/elasticsearch-exporter:latest
      container_name: elasticsearch_exporter
      user: root
      # volumes:
      #   - ${PWD}/compose/data/elasticsearch_exporter:/elasticsearch_exporter
      command: 
        - '--es.uri=http://elasticsearch:9200'     # change if needed
        - '--es.indices'
        - '--es.all'
        - '--es.indices_mappings'
        - '--es.aliases'
        - '--es.shards'
        - '--es.indices_settings'
        - '--es.timeout=10s'
        - '--web.listen-address=:9114'

      restart: always
      ports:
      - 9114:9114
      networks:
      - grafana_net
              
  terraform:
      build:
        context: .
        dockerfile: Dockerfile.terraform
      image: local/terraform:with-curl
      container_name: terraform
      working_dir: /workspace
      tty: true
      stdin_open: true
      volumes:
        # Mount your project
        - ${PWD}/compose/data/terraform:/workspace

        # Local cache/state directory (instead of Docker volume)
        - ${PWD}/compose/data/.terraform-data:/root/.terraform.d

        # Optional: cloud credentials (remove what you donâ€™t need)
        # - ~/.aws:/root/.aws:ro
        # - ~/.azure:/root/.azure:ro
        # - ~/.config/gcloud:/root/.config/gcloud:ro
        # - ~/.kube:/root/.kube:ro
        # - ~/.ssh:/root/.ssh:ro

        # Optional: needed only if you use Docker provider inside Terraform
        - /var/run/docker.sock:/var/run/docker.sock

      environment:
        TF_PLUGIN_CACHE_DIR: /root/.terraform.d/plugin-cache
        TF_INPUT: "1"
        TF_IN_AUTOMATION: "0"

      entrypoint: ["/bin/sh","-lc"]
      command: |
        'mkdir -p "$TF_PLUGIN_CACHE_DIR"; terraform --version; exec /bin/sh'
      networks:
      - grafana_net

  # Static replay of node_exporter metrics without quay.io
  fake-metrics:
    build:
      context: ./fake-metrics
    container_name: fake-metrics
    restart: unless-stopped
    ports:
      - "9500:8000"     
    networks:
      - grafana_net

  mariadb:
    image: mariadb:11.4
    container_name: mariadb
    environment:
      MARIADB_ROOT_PASSWORD: ${MARIADB_ROOT_PASSWORD:-changeme}
      MARIADB_DATABASE: ${MARIADB_DATABASE:-appdb}
      MARIADB_USER: ${MARIADB_USER:-appuser}
      MARIADB_PASSWORD: ${MARIADB_PASSWORD:-apppass}
      EXPORTER_PASSWORD: ${EXPORTER_PASSWORD:-MetricsPWD}
    ports:
      - "3306:3306"
    volumes:
      # - ${PWD}/compose/data/mariadb/data:/var/lib/mysql
      - mariadb_data:/var/lib/mysql
      - ${PWD}/compose/data/mariadb/initdb/01_create_exporter.sh:/docker-entrypoint-initdb.d/01_create_exporter.sh:ro
    healthcheck:
      test: ["CMD-SHELL", "mariadb -h 127.0.0.1 -uroot -p$MARIADB_ROOT_PASSWORD -e 'SELECT 1'"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - grafana_net

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    restart: unless-stopped
    ports:
      - "8080:80"
    environment:
      PMA_HOST: mariadb
      MYSQL_USER: ${MARIADB_USER:-appuser}
      MYSQL_PASSWORD: ${MARIADB_PASSWORD:-apppass}
    networks:
      - grafana_net

  mysqld_exporter:
    image: prom/mysqld-exporter:v0.15.1
    command: ["--config.my-cnf=/etc/.my.cnf"]
    volumes:
      - ${PWD}/compose/data/mysqld-exporter/.my.cnf:/etc/.my.cnf:ro
    depends_on:
      mariadb:
        condition: service_healthy
    ports:
      - "9104:9104"
    networks:
      grafana_net:
        aliases:
          - mysqld-exporter   # add this alias
  
  logsim:
    build:
      context: ./mariadb-log-sim-injection
    container_name: mariadb-log-sim-injection
    depends_on:
      mariadb:
        condition: service_healthy
    environment:
      # Simulator rates (override in .env if you like)
      RATE_LPS: ${RATE_LPS:-20}
      SLOW_PCT: ${SLOW_PCT:-15}
      ERROR_PCT: ${ERROR_PCT:-3}
      BATCH_SIZE: ${BATCH_SIZE:-200}
      MAX_BACKOFF_SEC: ${MAX_BACKOFF_SEC:-20}

      # DB connection
      MYSQL_HOST: mariadb
      MYSQL_PORT: 3306
      MYSQL_USER: root
      MYSQL_PASS: ${MARIADB_ROOT_PASSWORD:-root}
      MYSQL_DB: ${MYSQL_DB:-logsim}

      # Where the human-readable log is written (inside container)
      OUTPUT_LOG: /app/logs/mariadb-sim.log
    volumes:
      # bind mount logs to host for easy tailing
      - ./logs:/app/logs
    restart: unless-stopped
    networks:
      - grafana_net        
networks:
  grafana_net:
    driver: bridge
    external: true 
volumes:
  mariadb_data: